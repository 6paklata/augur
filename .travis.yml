dist: trusty
sudo: required
language: node_js
services:
  - docker
notifications:
  email: false
before_install:
  - curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
  - sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
  - sudo apt-get update
  - sudo apt-get -y -o Dpkg::Options::="--force-confnew" install docker-ce
  - sudo sudo curl -L https://github.com/docker/compose/releases/download/1.17.0/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose
  - sudo chmod +x /usr/local/bin/docker-compose

node_js:
  - "8"

before_script:
  - npm install

script:
  - docker pull $IMAGE_BUILD
  - docker tag $IMAGE_BUILD $IMAGE_LATEST
  - npm run lint
  - istanbul cover -x "**/seeds/**" -x "**/migrations/**" --include-all-sources --root ./build ./node_modules/mocha/bin/_mocha test --report lcovonly && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage

jobs:
  include:
    - stage: build
      script: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
              docker pull $IMAGE_LATEST;
              npm run docker:build;
              docker tag $IMAGE_LATEST $IMAGE_BUILD;
              docker push $IMAGE_BUILD
      env:
        - DOCKER_USERNAME=augurintegration
        - secure: KDRY8LJYUEBq6k18IlPs3fPFHD2Le99laXvA+Qflw+oN1sJWEZtTu50W9MR5vHfQn1QhoQpuN+xhKnEnRTrz4jMQtd1wnOJq6+RrmZZBUw+bCJTQipQUFjdYrGus7ofFV7AheeCmDrqC0fOR+bRSqKDHyIJ6Jdt4beKiVSuUWz0=
    - stage: deploy
      script: skip
      env:
        - DOCKER_USERNAME=augurintegration
        - secure: KDRY8LJYUEBq6k18IlPs3fPFHD2Le99laXvA+Qflw+oN1sJWEZtTu50W9MR5vHfQn1QhoQpuN+xhKnEnRTrz4jMQtd1wnOJq6+RrmZZBUw+bCJTQipQUFjdYrGus7ofFV7AheeCmDrqC0fOR+bRSqKDHyIJ6Jdt4beKiVSuUWz0=
        - TESTS=
      deploy: &script
        provider: script
        skip_cleanup: true
        script: docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD";
                docker pull $IMAGE_BUILD;
                docker tag $IMAGE_BUILD $IMAGE_LATEST;
                docker push $IMAGE_LATEST
      if: type = push
stages:
  - build
  - test
  - name: deploy
    if: branch = stable
git:
  depth: 5
branches:
  only:
    - stable

